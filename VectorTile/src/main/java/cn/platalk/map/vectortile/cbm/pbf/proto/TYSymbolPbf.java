// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t_y_symbol_pbf.proto

package cn.platalk.map.vectortile.cbm.pbf.proto;

@SuppressWarnings({ "unused", "unchecked" })
public final class TYSymbolPbf {
	private TYSymbolPbf() {
	}

	public static void registerAllExtensions(com.google.protobuf.ExtensionRegistryLite registry) {
	}

	public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
		registerAllExtensions((com.google.protobuf.ExtensionRegistryLite) registry);
	}

	public interface FillSymbolPbfOrBuilder extends
			// @@protoc_insertion_point(interface_extends:cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf)
			com.google.protobuf.MessageOrBuilder {

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		boolean hasUID();

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		int getUID();

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		boolean hasSymbolID();

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		int getSymbolID();

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		boolean hasFillColor();

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		java.lang.String getFillColor();

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		com.google.protobuf.ByteString getFillColorBytes();

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		boolean hasOutlineColor();

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		java.lang.String getOutlineColor();

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		com.google.protobuf.ByteString getOutlineColorBytes();

		/**
		 * <code>required double outlineWidth = 5;</code>
		 */
		boolean hasOutlineWidth();

		/**
		 * <code>required double outlineWidth = 5;</code>
		 */
		double getOutlineWidth();

		/**
		 * <code>required double levelMin = 6;</code>
		 */
		boolean hasLevelMin();

		/**
		 * <code>required double levelMin = 6;</code>
		 */
		double getLevelMin();

		/**
		 * <code>required double levelMax = 7;</code>
		 */
		boolean hasLevelMax();

		/**
		 * <code>required double levelMax = 7;</code>
		 */
		double getLevelMax();
	}

	/**
	 * Protobuf type
	 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf}
	 */
	public static final class FillSymbolPbf extends com.google.protobuf.GeneratedMessageV3 implements
			// @@protoc_insertion_point(message_implements:cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf)
			FillSymbolPbfOrBuilder {
		// Use FillSymbolPbf.newBuilder() to construct.
		private FillSymbolPbf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
			super(builder);
		}

		private FillSymbolPbf() {
			uID_ = 0;
			symbolID_ = 0;
			fillColor_ = "";
			outlineColor_ = "";
			outlineWidth_ = 0D;
			levelMin_ = 0D;
			levelMax_ = 0D;
		}

		@java.lang.Override
		public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}

		private FillSymbolPbf(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			this();
			int mutable_bitField0_ = 0;
			com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
					.newBuilder();
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
					case 0:
						done = true;
						break;
					default: {
						if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
							done = true;
						}
						break;
					}
					case 8: {
						bitField0_ |= 0x00000001;
						uID_ = input.readUInt32();
						break;
					}
					case 16: {
						bitField0_ |= 0x00000002;
						symbolID_ = input.readUInt32();
						break;
					}
					case 26: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00000004;
						fillColor_ = bs;
						break;
					}
					case 34: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00000008;
						outlineColor_ = bs;
						break;
					}
					case 41: {
						bitField0_ |= 0x00000010;
						outlineWidth_ = input.readDouble();
						break;
					}
					case 49: {
						bitField0_ |= 0x00000020;
						levelMin_ = input.readDouble();
						break;
					}
					case 57: {
						bitField0_ |= 0x00000040;
						levelMax_ = input.readDouble();
						break;
					}
					}
				}
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
			} finally {
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}

		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor;
		}

		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.class,
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.Builder.class);
		}

		private int bitField0_;
		public static final int UID_FIELD_NUMBER = 1;
		private int uID_;

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		public boolean hasUID() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		public int getUID() {
			return uID_;
		}

		public static final int SYMBOLID_FIELD_NUMBER = 2;
		private int symbolID_;

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		public boolean hasSymbolID() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		public int getSymbolID() {
			return symbolID_;
		}

		public static final int FILLCOLOR_FIELD_NUMBER = 3;
		private volatile java.lang.Object fillColor_;

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		public boolean hasFillColor() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		public java.lang.String getFillColor() {
			java.lang.Object ref = fillColor_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					fillColor_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>required string fillColor = 3;</code>
		 */
		public com.google.protobuf.ByteString getFillColorBytes() {
			java.lang.Object ref = fillColor_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				fillColor_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		public static final int OUTLINECOLOR_FIELD_NUMBER = 4;
		private volatile java.lang.Object outlineColor_;

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		public boolean hasOutlineColor() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		public java.lang.String getOutlineColor() {
			java.lang.Object ref = outlineColor_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					outlineColor_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>required string outlineColor = 4;</code>
		 */
		public com.google.protobuf.ByteString getOutlineColorBytes() {
			java.lang.Object ref = outlineColor_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				outlineColor_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		public static final int OUTLINEWIDTH_FIELD_NUMBER = 5;
		private double outlineWidth_;

		/**
		 * <code>required double outlineWidth = 5;</code>
		 */
		public boolean hasOutlineWidth() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}

		/**
		 * <code>required double outlineWidth = 5;</code>
		 */
		public double getOutlineWidth() {
			return outlineWidth_;
		}

		public static final int LEVELMIN_FIELD_NUMBER = 6;
		private double levelMin_;

		/**
		 * <code>required double levelMin = 6;</code>
		 */
		public boolean hasLevelMin() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}

		/**
		 * <code>required double levelMin = 6;</code>
		 */
		public double getLevelMin() {
			return levelMin_;
		}

		public static final int LEVELMAX_FIELD_NUMBER = 7;
		private double levelMax_;

		/**
		 * <code>required double levelMax = 7;</code>
		 */
		public boolean hasLevelMax() {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		}

		/**
		 * <code>required double levelMax = 7;</code>
		 */
		public double getLevelMax() {
			return levelMax_;
		}

		private byte memoizedIsInitialized = -1;

		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if (isInitialized == 1)
				return true;
			if (isInitialized == 0)
				return false;

			if (!hasUID()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasSymbolID()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasFillColor()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasOutlineColor()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasOutlineWidth()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasLevelMin()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasLevelMax()) {
				memoizedIsInitialized = 0;
				return false;
			}
			memoizedIsInitialized = 1;
			return true;
		}

		public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				output.writeUInt32(1, uID_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				output.writeUInt32(2, symbolID_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fillColor_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 4, outlineColor_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				output.writeDouble(5, outlineWidth_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				output.writeDouble(6, levelMin_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				output.writeDouble(7, levelMax_);
			}
			unknownFields.writeTo(output);
		}

		public int getSerializedSize() {
			int size = memoizedSize;
			if (size != -1)
				return size;

			size = 0;
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, uID_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, symbolID_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, fillColor_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, outlineColor_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(5, outlineWidth_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(6, levelMin_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(7, levelMax_);
			}
			size += unknownFields.getSerializedSize();
			memoizedSize = size;
			return size;
		}

		private static final long serialVersionUID = 0L;

		@java.lang.Override
		public boolean equals(final java.lang.Object obj) {
			if (obj == this) {
				return true;
			}
			if (!(obj instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf)) {
				return super.equals(obj);
			}
			cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf other = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf) obj;

			boolean result = true;
			result = result && (hasUID() == other.hasUID());
			if (hasUID()) {
				result = result && (getUID() == other.getUID());
			}
			result = result && (hasSymbolID() == other.hasSymbolID());
			if (hasSymbolID()) {
				result = result && (getSymbolID() == other.getSymbolID());
			}
			result = result && (hasFillColor() == other.hasFillColor());
			if (hasFillColor()) {
				result = result && getFillColor().equals(other.getFillColor());
			}
			result = result && (hasOutlineColor() == other.hasOutlineColor());
			if (hasOutlineColor()) {
				result = result && getOutlineColor().equals(other.getOutlineColor());
			}
			result = result && (hasOutlineWidth() == other.hasOutlineWidth());
			if (hasOutlineWidth()) {
				result = result && (java.lang.Double.doubleToLongBits(getOutlineWidth()) == java.lang.Double
						.doubleToLongBits(other.getOutlineWidth()));
			}
			result = result && (hasLevelMin() == other.hasLevelMin());
			if (hasLevelMin()) {
				result = result && (java.lang.Double.doubleToLongBits(getLevelMin()) == java.lang.Double
						.doubleToLongBits(other.getLevelMin()));
			}
			result = result && (hasLevelMax() == other.hasLevelMax());
			if (hasLevelMax()) {
				result = result && (java.lang.Double.doubleToLongBits(getLevelMax()) == java.lang.Double
						.doubleToLongBits(other.getLevelMax()));
			}
			result = result && unknownFields.equals(other.unknownFields);
			return result;
		}

		@java.lang.Override
		public int hashCode() {
			if (memoizedHashCode != 0) {
				return memoizedHashCode;
			}
			int hash = 41;
			hash = (19 * hash) + getDescriptor().hashCode();
			if (hasUID()) {
				hash = (37 * hash) + UID_FIELD_NUMBER;
				hash = (53 * hash) + getUID();
			}
			if (hasSymbolID()) {
				hash = (37 * hash) + SYMBOLID_FIELD_NUMBER;
				hash = (53 * hash) + getSymbolID();
			}
			if (hasFillColor()) {
				hash = (37 * hash) + FILLCOLOR_FIELD_NUMBER;
				hash = (53 * hash) + getFillColor().hashCode();
			}
			if (hasOutlineColor()) {
				hash = (37 * hash) + OUTLINECOLOR_FIELD_NUMBER;
				hash = (53 * hash) + getOutlineColor().hashCode();
			}
			if (hasOutlineWidth()) {
				hash = (37 * hash) + OUTLINEWIDTH_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getOutlineWidth()));
			}
			if (hasLevelMin()) {
				hash = (37 * hash) + LEVELMIN_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getLevelMin()));
			}
			if (hasLevelMax()) {
				hash = (37 * hash) + LEVELMAX_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getLevelMax()));
			}
			hash = (29 * hash) + unknownFields.hashCode();
			memoizedHashCode = hash;
			return hash;
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(byte[] data)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(byte[] data,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseDelimitedFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseDelimitedFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
					extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				com.google.protobuf.CodedInputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parseFrom(
				com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public Builder newBuilderForType() {
			return newBuilder();
		}

		public static Builder newBuilder() {
			return DEFAULT_INSTANCE.toBuilder();
		}

		public static Builder newBuilder(cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf prototype) {
			return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
		}

		public Builder toBuilder() {
			return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
		}

		@java.lang.Override
		protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}

		/**
		 * Protobuf type
		 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf}
		 */
		public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
				// @@protoc_insertion_point(builder_implements:cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf)
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbfOrBuilder {
			public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor;
			}

			protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_fieldAccessorTable
						.ensureFieldAccessorsInitialized(
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.class,
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.Builder.class);
			}

			// Construct using
			// cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}

			private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}

			private void maybeForceBuilderInitialization() {
				if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
				}
			}

			public Builder clear() {
				super.clear();
				uID_ = 0;
				bitField0_ = (bitField0_ & ~0x00000001);
				symbolID_ = 0;
				bitField0_ = (bitField0_ & ~0x00000002);
				fillColor_ = "";
				bitField0_ = (bitField0_ & ~0x00000004);
				outlineColor_ = "";
				bitField0_ = (bitField0_ & ~0x00000008);
				outlineWidth_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000010);
				levelMin_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000020);
				levelMax_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000040);
				return this;
			}

			public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf getDefaultInstanceForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.getDefaultInstance();
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf build() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf result = buildPartial();
				if (!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf buildPartial() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf result = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf(
						this);
				int from_bitField0_ = bitField0_;
				int to_bitField0_ = 0;
				if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
					to_bitField0_ |= 0x00000001;
				}
				result.uID_ = uID_;
				if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
					to_bitField0_ |= 0x00000002;
				}
				result.symbolID_ = symbolID_;
				if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
					to_bitField0_ |= 0x00000004;
				}
				result.fillColor_ = fillColor_;
				if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
					to_bitField0_ |= 0x00000008;
				}
				result.outlineColor_ = outlineColor_;
				if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
					to_bitField0_ |= 0x00000010;
				}
				result.outlineWidth_ = outlineWidth_;
				if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
					to_bitField0_ |= 0x00000020;
				}
				result.levelMin_ = levelMin_;
				if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
					to_bitField0_ |= 0x00000040;
				}
				result.levelMax_ = levelMax_;
				result.bitField0_ = to_bitField0_;
				onBuilt();
				return result;
			}

			public Builder clone() {
				return (Builder) super.clone();
			}

			public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.setField(field, value);
			}

			public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
				return (Builder) super.clearField(field);
			}

			public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
				return (Builder) super.clearOneof(oneof);
			}

			public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, int index,
					Object value) {
				return (Builder) super.setRepeatedField(field, index, value);
			}

			public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.addRepeatedField(field, value);
			}

			public Builder mergeFrom(com.google.protobuf.Message other) {
				if (other instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf) {
					return mergeFrom((cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}

			public Builder mergeFrom(cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf other) {
				if (other == cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf.getDefaultInstance())
					return this;
				if (other.hasUID()) {
					setUID(other.getUID());
				}
				if (other.hasSymbolID()) {
					setSymbolID(other.getSymbolID());
				}
				if (other.hasFillColor()) {
					bitField0_ |= 0x00000004;
					fillColor_ = other.fillColor_;
					onChanged();
				}
				if (other.hasOutlineColor()) {
					bitField0_ |= 0x00000008;
					outlineColor_ = other.outlineColor_;
					onChanged();
				}
				if (other.hasOutlineWidth()) {
					setOutlineWidth(other.getOutlineWidth());
				}
				if (other.hasLevelMin()) {
					setLevelMin(other.getLevelMin());
				}
				if (other.hasLevelMax()) {
					setLevelMax(other.getLevelMax());
				}
				this.mergeUnknownFields(other.unknownFields);
				onChanged();
				return this;
			}

			public final boolean isInitialized() {
				if (!hasUID()) {
					return false;
				}
				if (!hasSymbolID()) {
					return false;
				}
				if (!hasFillColor()) {
					return false;
				}
				if (!hasOutlineColor()) {
					return false;
				}
				if (!hasOutlineWidth()) {
					return false;
				}
				if (!hasLevelMin()) {
					return false;
				}
				if (!hasLevelMax()) {
					return false;
				}
				return true;
			}

			public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
				} catch (com.google.protobuf.InvalidProtocolBufferException e) {
					parsedMessage = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf) e
							.getUnfinishedMessage();
					throw e.unwrapIOException();
				} finally {
					if (parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}

			private int bitField0_;

			private int uID_;

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public boolean hasUID() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public int getUID() {
				return uID_;
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public Builder setUID(int value) {
				bitField0_ |= 0x00000001;
				uID_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public Builder clearUID() {
				bitField0_ = (bitField0_ & ~0x00000001);
				uID_ = 0;
				onChanged();
				return this;
			}

			private int symbolID_;

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public boolean hasSymbolID() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public int getSymbolID() {
				return symbolID_;
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public Builder setSymbolID(int value) {
				bitField0_ |= 0x00000002;
				symbolID_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public Builder clearSymbolID() {
				bitField0_ = (bitField0_ & ~0x00000002);
				symbolID_ = 0;
				onChanged();
				return this;
			}

			private java.lang.Object fillColor_ = "";

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public boolean hasFillColor() {
				return ((bitField0_ & 0x00000004) == 0x00000004);
			}

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public java.lang.String getFillColor() {
				java.lang.Object ref = fillColor_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						fillColor_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public com.google.protobuf.ByteString getFillColorBytes() {
				java.lang.Object ref = fillColor_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					fillColor_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public Builder setFillColor(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000004;
				fillColor_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public Builder clearFillColor() {
				bitField0_ = (bitField0_ & ~0x00000004);
				fillColor_ = getDefaultInstance().getFillColor();
				onChanged();
				return this;
			}

			/**
			 * <code>required string fillColor = 3;</code>
			 */
			public Builder setFillColorBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000004;
				fillColor_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object outlineColor_ = "";

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public boolean hasOutlineColor() {
				return ((bitField0_ & 0x00000008) == 0x00000008);
			}

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public java.lang.String getOutlineColor() {
				java.lang.Object ref = outlineColor_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						outlineColor_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public com.google.protobuf.ByteString getOutlineColorBytes() {
				java.lang.Object ref = outlineColor_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					outlineColor_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public Builder setOutlineColor(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000008;
				outlineColor_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public Builder clearOutlineColor() {
				bitField0_ = (bitField0_ & ~0x00000008);
				outlineColor_ = getDefaultInstance().getOutlineColor();
				onChanged();
				return this;
			}

			/**
			 * <code>required string outlineColor = 4;</code>
			 */
			public Builder setOutlineColorBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000008;
				outlineColor_ = value;
				onChanged();
				return this;
			}

			private double outlineWidth_;

			/**
			 * <code>required double outlineWidth = 5;</code>
			 */
			public boolean hasOutlineWidth() {
				return ((bitField0_ & 0x00000010) == 0x00000010);
			}

			/**
			 * <code>required double outlineWidth = 5;</code>
			 */
			public double getOutlineWidth() {
				return outlineWidth_;
			}

			/**
			 * <code>required double outlineWidth = 5;</code>
			 */
			public Builder setOutlineWidth(double value) {
				bitField0_ |= 0x00000010;
				outlineWidth_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double outlineWidth = 5;</code>
			 */
			public Builder clearOutlineWidth() {
				bitField0_ = (bitField0_ & ~0x00000010);
				outlineWidth_ = 0D;
				onChanged();
				return this;
			}

			private double levelMin_;

			/**
			 * <code>required double levelMin = 6;</code>
			 */
			public boolean hasLevelMin() {
				return ((bitField0_ & 0x00000020) == 0x00000020);
			}

			/**
			 * <code>required double levelMin = 6;</code>
			 */
			public double getLevelMin() {
				return levelMin_;
			}

			/**
			 * <code>required double levelMin = 6;</code>
			 */
			public Builder setLevelMin(double value) {
				bitField0_ |= 0x00000020;
				levelMin_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double levelMin = 6;</code>
			 */
			public Builder clearLevelMin() {
				bitField0_ = (bitField0_ & ~0x00000020);
				levelMin_ = 0D;
				onChanged();
				return this;
			}

			private double levelMax_;

			/**
			 * <code>required double levelMax = 7;</code>
			 */
			public boolean hasLevelMax() {
				return ((bitField0_ & 0x00000040) == 0x00000040);
			}

			/**
			 * <code>required double levelMax = 7;</code>
			 */
			public double getLevelMax() {
				return levelMax_;
			}

			/**
			 * <code>required double levelMax = 7;</code>
			 */
			public Builder setLevelMax(double value) {
				bitField0_ |= 0x00000040;
				levelMax_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double levelMax = 7;</code>
			 */
			public Builder clearLevelMax() {
				bitField0_ = (bitField0_ & ~0x00000040);
				levelMax_ = 0D;
				onChanged();
				return this;
			}

			public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.setUnknownFields(unknownFields);
			}

			public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.mergeUnknownFields(unknownFields);
			}

			// @@protoc_insertion_point(builder_scope:cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf)
		}

		// @@protoc_insertion_point(class_scope:cn.platalk.map.vectortile.cbm.pbf.proto.FillSymbolPbf)
		private static final cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf DEFAULT_INSTANCE;
		static {
			DEFAULT_INSTANCE = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf();
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf getDefaultInstance() {
			return DEFAULT_INSTANCE;
		}

		@java.lang.Deprecated
		public static final com.google.protobuf.Parser<FillSymbolPbf> PARSER = new com.google.protobuf.AbstractParser<FillSymbolPbf>() {
			public FillSymbolPbf parsePartialFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry)
					throws com.google.protobuf.InvalidProtocolBufferException {
				return new FillSymbolPbf(input, extensionRegistry);
			}
		};

		public static com.google.protobuf.Parser<FillSymbolPbf> parser() {
			return PARSER;
		}

		@java.lang.Override
		public com.google.protobuf.Parser<FillSymbolPbf> getParserForType() {
			return PARSER;
		}

		public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.FillSymbolPbf getDefaultInstanceForType() {
			return DEFAULT_INSTANCE;
		}

	}

	public interface IconTextSymbolPbfOrBuilder extends
			// @@protoc_insertion_point(interface_extends:cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf)
			com.google.protobuf.MessageOrBuilder {

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		boolean hasUID();

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		int getUID();

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		boolean hasSymbolID();

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		int getSymbolID();

		/**
		 * <code>required bool iconVisible = 3;</code>
		 */
		boolean hasIconVisible();

		/**
		 * <code>required bool iconVisible = 3;</code>
		 */
		boolean getIconVisible();

		/**
		 * <code>required double iconSize = 4;</code>
		 */
		boolean hasIconSize();

		/**
		 * <code>required double iconSize = 4;</code>
		 */
		double getIconSize();

		/**
		 * <code>required double iconRotate = 5;</code>
		 */
		boolean hasIconRotate();

		/**
		 * <code>required double iconRotate = 5;</code>
		 */
		double getIconRotate();

		/**
		 * <code>required double iconOffsetX = 6;</code>
		 */
		boolean hasIconOffsetX();

		/**
		 * <code>required double iconOffsetX = 6;</code>
		 */
		double getIconOffsetX();

		/**
		 * <code>required double iconOffsetY = 7;</code>
		 */
		boolean hasIconOffsetY();

		/**
		 * <code>required double iconOffsetY = 7;</code>
		 */
		double getIconOffsetY();

		/**
		 * <code>required bool textVisible = 10;</code>
		 */
		boolean hasTextVisible();

		/**
		 * <code>required bool textVisible = 10;</code>
		 */
		boolean getTextVisible();

		/**
		 * <code>required double textSize = 11;</code>
		 */
		boolean hasTextSize();

		/**
		 * <code>required double textSize = 11;</code>
		 */
		double getTextSize();

		/**
		 * <code>required double textRotate = 12;</code>
		 */
		boolean hasTextRotate();

		/**
		 * <code>required double textRotate = 12;</code>
		 */
		double getTextRotate();

		/**
		 * <code>required string textFont = 13;</code>
		 */
		boolean hasTextFont();

		/**
		 * <code>required string textFont = 13;</code>
		 */
		java.lang.String getTextFont();

		/**
		 * <code>required string textFont = 13;</code>
		 */
		com.google.protobuf.ByteString getTextFontBytes();

		/**
		 * <code>required string textColor = 14;</code>
		 */
		boolean hasTextColor();

		/**
		 * <code>required string textColor = 14;</code>
		 */
		java.lang.String getTextColor();

		/**
		 * <code>required string textColor = 14;</code>
		 */
		com.google.protobuf.ByteString getTextColorBytes();

		/**
		 * <code>required double textOffsetX = 15;</code>
		 */
		boolean hasTextOffsetX();

		/**
		 * <code>required double textOffsetX = 15;</code>
		 */
		double getTextOffsetX();

		/**
		 * <code>required double textOffsetY = 16;</code>
		 */
		boolean hasTextOffsetY();

		/**
		 * <code>required double textOffsetY = 16;</code>
		 */
		double getTextOffsetY();

		/**
		 * <code>required double levelMin = 21;</code>
		 */
		boolean hasLevelMin();

		/**
		 * <code>required double levelMin = 21;</code>
		 */
		double getLevelMin();

		/**
		 * <code>required double levelMax = 22;</code>
		 */
		boolean hasLevelMax();

		/**
		 * <code>required double levelMax = 22;</code>
		 */
		double getLevelMax();

		/**
		 * <code>required uint32 priority = 23;</code>
		 */
		boolean hasPriority();

		/**
		 * <code>required uint32 priority = 23;</code>
		 */
		int getPriority();

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		boolean hasOtherPaint();

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		java.lang.String getOtherPaint();

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		com.google.protobuf.ByteString getOtherPaintBytes();

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		boolean hasOtherLayout();

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		java.lang.String getOtherLayout();

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		com.google.protobuf.ByteString getOtherLayoutBytes();
	}

	/**
	 * Protobuf type
	 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf}
	 */
	public static final class IconTextSymbolPbf extends com.google.protobuf.GeneratedMessageV3 implements
			// @@protoc_insertion_point(message_implements:cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf)
			IconTextSymbolPbfOrBuilder {
		// Use IconTextSymbolPbf.newBuilder() to construct.
		private IconTextSymbolPbf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
			super(builder);
		}

		private IconTextSymbolPbf() {
			uID_ = 0;
			symbolID_ = 0;
			iconVisible_ = false;
			iconSize_ = 0D;
			iconRotate_ = 0D;
			iconOffsetX_ = 0D;
			iconOffsetY_ = 0D;
			textVisible_ = false;
			textSize_ = 0D;
			textRotate_ = 0D;
			textFont_ = "";
			textColor_ = "";
			textOffsetX_ = 0D;
			textOffsetY_ = 0D;
			levelMin_ = 0D;
			levelMax_ = 0D;
			priority_ = 0;
			otherPaint_ = "";
			otherLayout_ = "";
		}

		@java.lang.Override
		public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}

		private IconTextSymbolPbf(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			this();
			int mutable_bitField0_ = 0;
			com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
					.newBuilder();
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
					case 0:
						done = true;
						break;
					default: {
						if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
							done = true;
						}
						break;
					}
					case 8: {
						bitField0_ |= 0x00000001;
						uID_ = input.readUInt32();
						break;
					}
					case 16: {
						bitField0_ |= 0x00000002;
						symbolID_ = input.readUInt32();
						break;
					}
					case 24: {
						bitField0_ |= 0x00000004;
						iconVisible_ = input.readBool();
						break;
					}
					case 33: {
						bitField0_ |= 0x00000008;
						iconSize_ = input.readDouble();
						break;
					}
					case 41: {
						bitField0_ |= 0x00000010;
						iconRotate_ = input.readDouble();
						break;
					}
					case 49: {
						bitField0_ |= 0x00000020;
						iconOffsetX_ = input.readDouble();
						break;
					}
					case 57: {
						bitField0_ |= 0x00000040;
						iconOffsetY_ = input.readDouble();
						break;
					}
					case 80: {
						bitField0_ |= 0x00000080;
						textVisible_ = input.readBool();
						break;
					}
					case 89: {
						bitField0_ |= 0x00000100;
						textSize_ = input.readDouble();
						break;
					}
					case 97: {
						bitField0_ |= 0x00000200;
						textRotate_ = input.readDouble();
						break;
					}
					case 106: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00000400;
						textFont_ = bs;
						break;
					}
					case 114: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00000800;
						textColor_ = bs;
						break;
					}
					case 121: {
						bitField0_ |= 0x00001000;
						textOffsetX_ = input.readDouble();
						break;
					}
					case 129: {
						bitField0_ |= 0x00002000;
						textOffsetY_ = input.readDouble();
						break;
					}
					case 169: {
						bitField0_ |= 0x00004000;
						levelMin_ = input.readDouble();
						break;
					}
					case 177: {
						bitField0_ |= 0x00008000;
						levelMax_ = input.readDouble();
						break;
					}
					case 184: {
						bitField0_ |= 0x00010000;
						priority_ = input.readUInt32();
						break;
					}
					case 242: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00020000;
						otherPaint_ = bs;
						break;
					}
					case 250: {
						com.google.protobuf.ByteString bs = input.readBytes();
						bitField0_ |= 0x00040000;
						otherLayout_ = bs;
						break;
					}
					}
				}
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
			} finally {
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}

		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor;
		}

		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.class,
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.Builder.class);
		}

		private int bitField0_;
		public static final int UID_FIELD_NUMBER = 1;
		private int uID_;

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		public boolean hasUID() {
			return ((bitField0_ & 0x00000001) == 0x00000001);
		}

		/**
		 * <code>required uint32 UID = 1;</code>
		 */
		public int getUID() {
			return uID_;
		}

		public static final int SYMBOLID_FIELD_NUMBER = 2;
		private int symbolID_;

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		public boolean hasSymbolID() {
			return ((bitField0_ & 0x00000002) == 0x00000002);
		}

		/**
		 * <code>required uint32 symbolID = 2;</code>
		 */
		public int getSymbolID() {
			return symbolID_;
		}

		public static final int ICONVISIBLE_FIELD_NUMBER = 3;
		private boolean iconVisible_;

		/**
		 * <code>required bool iconVisible = 3;</code>
		 */
		public boolean hasIconVisible() {
			return ((bitField0_ & 0x00000004) == 0x00000004);
		}

		/**
		 * <code>required bool iconVisible = 3;</code>
		 */
		public boolean getIconVisible() {
			return iconVisible_;
		}

		public static final int ICONSIZE_FIELD_NUMBER = 4;
		private double iconSize_;

		/**
		 * <code>required double iconSize = 4;</code>
		 */
		public boolean hasIconSize() {
			return ((bitField0_ & 0x00000008) == 0x00000008);
		}

		/**
		 * <code>required double iconSize = 4;</code>
		 */
		public double getIconSize() {
			return iconSize_;
		}

		public static final int ICONROTATE_FIELD_NUMBER = 5;
		private double iconRotate_;

		/**
		 * <code>required double iconRotate = 5;</code>
		 */
		public boolean hasIconRotate() {
			return ((bitField0_ & 0x00000010) == 0x00000010);
		}

		/**
		 * <code>required double iconRotate = 5;</code>
		 */
		public double getIconRotate() {
			return iconRotate_;
		}

		public static final int ICONOFFSETX_FIELD_NUMBER = 6;
		private double iconOffsetX_;

		/**
		 * <code>required double iconOffsetX = 6;</code>
		 */
		public boolean hasIconOffsetX() {
			return ((bitField0_ & 0x00000020) == 0x00000020);
		}

		/**
		 * <code>required double iconOffsetX = 6;</code>
		 */
		public double getIconOffsetX() {
			return iconOffsetX_;
		}

		public static final int ICONOFFSETY_FIELD_NUMBER = 7;
		private double iconOffsetY_;

		/**
		 * <code>required double iconOffsetY = 7;</code>
		 */
		public boolean hasIconOffsetY() {
			return ((bitField0_ & 0x00000040) == 0x00000040);
		}

		/**
		 * <code>required double iconOffsetY = 7;</code>
		 */
		public double getIconOffsetY() {
			return iconOffsetY_;
		}

		public static final int TEXTVISIBLE_FIELD_NUMBER = 10;
		private boolean textVisible_;

		/**
		 * <code>required bool textVisible = 10;</code>
		 */
		public boolean hasTextVisible() {
			return ((bitField0_ & 0x00000080) == 0x00000080);
		}

		/**
		 * <code>required bool textVisible = 10;</code>
		 */
		public boolean getTextVisible() {
			return textVisible_;
		}

		public static final int TEXTSIZE_FIELD_NUMBER = 11;
		private double textSize_;

		/**
		 * <code>required double textSize = 11;</code>
		 */
		public boolean hasTextSize() {
			return ((bitField0_ & 0x00000100) == 0x00000100);
		}

		/**
		 * <code>required double textSize = 11;</code>
		 */
		public double getTextSize() {
			return textSize_;
		}

		public static final int TEXTROTATE_FIELD_NUMBER = 12;
		private double textRotate_;

		/**
		 * <code>required double textRotate = 12;</code>
		 */
		public boolean hasTextRotate() {
			return ((bitField0_ & 0x00000200) == 0x00000200);
		}

		/**
		 * <code>required double textRotate = 12;</code>
		 */
		public double getTextRotate() {
			return textRotate_;
		}

		public static final int TEXTFONT_FIELD_NUMBER = 13;
		private volatile java.lang.Object textFont_;

		/**
		 * <code>required string textFont = 13;</code>
		 */
		public boolean hasTextFont() {
			return ((bitField0_ & 0x00000400) == 0x00000400);
		}

		/**
		 * <code>required string textFont = 13;</code>
		 */
		public java.lang.String getTextFont() {
			java.lang.Object ref = textFont_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					textFont_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>required string textFont = 13;</code>
		 */
		public com.google.protobuf.ByteString getTextFontBytes() {
			java.lang.Object ref = textFont_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				textFont_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		public static final int TEXTCOLOR_FIELD_NUMBER = 14;
		private volatile java.lang.Object textColor_;

		/**
		 * <code>required string textColor = 14;</code>
		 */
		public boolean hasTextColor() {
			return ((bitField0_ & 0x00000800) == 0x00000800);
		}

		/**
		 * <code>required string textColor = 14;</code>
		 */
		public java.lang.String getTextColor() {
			java.lang.Object ref = textColor_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					textColor_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>required string textColor = 14;</code>
		 */
		public com.google.protobuf.ByteString getTextColorBytes() {
			java.lang.Object ref = textColor_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				textColor_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		public static final int TEXTOFFSETX_FIELD_NUMBER = 15;
		private double textOffsetX_;

		/**
		 * <code>required double textOffsetX = 15;</code>
		 */
		public boolean hasTextOffsetX() {
			return ((bitField0_ & 0x00001000) == 0x00001000);
		}

		/**
		 * <code>required double textOffsetX = 15;</code>
		 */
		public double getTextOffsetX() {
			return textOffsetX_;
		}

		public static final int TEXTOFFSETY_FIELD_NUMBER = 16;
		private double textOffsetY_;

		/**
		 * <code>required double textOffsetY = 16;</code>
		 */
		public boolean hasTextOffsetY() {
			return ((bitField0_ & 0x00002000) == 0x00002000);
		}

		/**
		 * <code>required double textOffsetY = 16;</code>
		 */
		public double getTextOffsetY() {
			return textOffsetY_;
		}

		public static final int LEVELMIN_FIELD_NUMBER = 21;
		private double levelMin_;

		/**
		 * <code>required double levelMin = 21;</code>
		 */
		public boolean hasLevelMin() {
			return ((bitField0_ & 0x00004000) == 0x00004000);
		}

		/**
		 * <code>required double levelMin = 21;</code>
		 */
		public double getLevelMin() {
			return levelMin_;
		}

		public static final int LEVELMAX_FIELD_NUMBER = 22;
		private double levelMax_;

		/**
		 * <code>required double levelMax = 22;</code>
		 */
		public boolean hasLevelMax() {
			return ((bitField0_ & 0x00008000) == 0x00008000);
		}

		/**
		 * <code>required double levelMax = 22;</code>
		 */
		public double getLevelMax() {
			return levelMax_;
		}

		public static final int PRIORITY_FIELD_NUMBER = 23;
		private int priority_;

		/**
		 * <code>required uint32 priority = 23;</code>
		 */
		public boolean hasPriority() {
			return ((bitField0_ & 0x00010000) == 0x00010000);
		}

		/**
		 * <code>required uint32 priority = 23;</code>
		 */
		public int getPriority() {
			return priority_;
		}

		public static final int OTHERPAINT_FIELD_NUMBER = 30;
		private volatile java.lang.Object otherPaint_;

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		public boolean hasOtherPaint() {
			return ((bitField0_ & 0x00020000) == 0x00020000);
		}

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		public java.lang.String getOtherPaint() {
			java.lang.Object ref = otherPaint_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					otherPaint_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>optional string otherPaint = 30;</code>
		 */
		public com.google.protobuf.ByteString getOtherPaintBytes() {
			java.lang.Object ref = otherPaint_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				otherPaint_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		public static final int OTHERLAYOUT_FIELD_NUMBER = 31;
		private volatile java.lang.Object otherLayout_;

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		public boolean hasOtherLayout() {
			return ((bitField0_ & 0x00040000) == 0x00040000);
		}

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		public java.lang.String getOtherLayout() {
			java.lang.Object ref = otherLayout_;
			if (ref instanceof java.lang.String) {
				return (java.lang.String) ref;
			} else {
				com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				if (bs.isValidUtf8()) {
					otherLayout_ = s;
				}
				return s;
			}
		}

		/**
		 * <code>optional string otherLayout = 31;</code>
		 */
		public com.google.protobuf.ByteString getOtherLayoutBytes() {
			java.lang.Object ref = otherLayout_;
			if (ref instanceof java.lang.String) {
				com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
				otherLayout_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		private byte memoizedIsInitialized = -1;

		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if (isInitialized == 1)
				return true;
			if (isInitialized == 0)
				return false;

			if (!hasUID()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasSymbolID()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIconVisible()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIconSize()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIconRotate()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIconOffsetX()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasIconOffsetY()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextVisible()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextSize()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextRotate()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextFont()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextColor()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextOffsetX()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasTextOffsetY()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasLevelMin()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasLevelMax()) {
				memoizedIsInitialized = 0;
				return false;
			}
			if (!hasPriority()) {
				memoizedIsInitialized = 0;
				return false;
			}
			memoizedIsInitialized = 1;
			return true;
		}

		public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				output.writeUInt32(1, uID_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				output.writeUInt32(2, symbolID_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				output.writeBool(3, iconVisible_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				output.writeDouble(4, iconSize_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				output.writeDouble(5, iconRotate_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				output.writeDouble(6, iconOffsetX_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				output.writeDouble(7, iconOffsetY_);
			}
			if (((bitField0_ & 0x00000080) == 0x00000080)) {
				output.writeBool(10, textVisible_);
			}
			if (((bitField0_ & 0x00000100) == 0x00000100)) {
				output.writeDouble(11, textSize_);
			}
			if (((bitField0_ & 0x00000200) == 0x00000200)) {
				output.writeDouble(12, textRotate_);
			}
			if (((bitField0_ & 0x00000400) == 0x00000400)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 13, textFont_);
			}
			if (((bitField0_ & 0x00000800) == 0x00000800)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 14, textColor_);
			}
			if (((bitField0_ & 0x00001000) == 0x00001000)) {
				output.writeDouble(15, textOffsetX_);
			}
			if (((bitField0_ & 0x00002000) == 0x00002000)) {
				output.writeDouble(16, textOffsetY_);
			}
			if (((bitField0_ & 0x00004000) == 0x00004000)) {
				output.writeDouble(21, levelMin_);
			}
			if (((bitField0_ & 0x00008000) == 0x00008000)) {
				output.writeDouble(22, levelMax_);
			}
			if (((bitField0_ & 0x00010000) == 0x00010000)) {
				output.writeUInt32(23, priority_);
			}
			if (((bitField0_ & 0x00020000) == 0x00020000)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 30, otherPaint_);
			}
			if (((bitField0_ & 0x00040000) == 0x00040000)) {
				com.google.protobuf.GeneratedMessageV3.writeString(output, 31, otherLayout_);
			}
			unknownFields.writeTo(output);
		}

		public int getSerializedSize() {
			int size = memoizedSize;
			if (size != -1)
				return size;

			size = 0;
			if (((bitField0_ & 0x00000001) == 0x00000001)) {
				size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, uID_);
			}
			if (((bitField0_ & 0x00000002) == 0x00000002)) {
				size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, symbolID_);
			}
			if (((bitField0_ & 0x00000004) == 0x00000004)) {
				size += com.google.protobuf.CodedOutputStream.computeBoolSize(3, iconVisible_);
			}
			if (((bitField0_ & 0x00000008) == 0x00000008)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(4, iconSize_);
			}
			if (((bitField0_ & 0x00000010) == 0x00000010)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(5, iconRotate_);
			}
			if (((bitField0_ & 0x00000020) == 0x00000020)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(6, iconOffsetX_);
			}
			if (((bitField0_ & 0x00000040) == 0x00000040)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(7, iconOffsetY_);
			}
			if (((bitField0_ & 0x00000080) == 0x00000080)) {
				size += com.google.protobuf.CodedOutputStream.computeBoolSize(10, textVisible_);
			}
			if (((bitField0_ & 0x00000100) == 0x00000100)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(11, textSize_);
			}
			if (((bitField0_ & 0x00000200) == 0x00000200)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(12, textRotate_);
			}
			if (((bitField0_ & 0x00000400) == 0x00000400)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, textFont_);
			}
			if (((bitField0_ & 0x00000800) == 0x00000800)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, textColor_);
			}
			if (((bitField0_ & 0x00001000) == 0x00001000)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(15, textOffsetX_);
			}
			if (((bitField0_ & 0x00002000) == 0x00002000)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(16, textOffsetY_);
			}
			if (((bitField0_ & 0x00004000) == 0x00004000)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(21, levelMin_);
			}
			if (((bitField0_ & 0x00008000) == 0x00008000)) {
				size += com.google.protobuf.CodedOutputStream.computeDoubleSize(22, levelMax_);
			}
			if (((bitField0_ & 0x00010000) == 0x00010000)) {
				size += com.google.protobuf.CodedOutputStream.computeUInt32Size(23, priority_);
			}
			if (((bitField0_ & 0x00020000) == 0x00020000)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(30, otherPaint_);
			}
			if (((bitField0_ & 0x00040000) == 0x00040000)) {
				size += com.google.protobuf.GeneratedMessageV3.computeStringSize(31, otherLayout_);
			}
			size += unknownFields.getSerializedSize();
			memoizedSize = size;
			return size;
		}

		private static final long serialVersionUID = 0L;

		@java.lang.Override
		public boolean equals(final java.lang.Object obj) {
			if (obj == this) {
				return true;
			}
			if (!(obj instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf)) {
				return super.equals(obj);
			}
			cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf other = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf) obj;

			boolean result = true;
			result = result && (hasUID() == other.hasUID());
			if (hasUID()) {
				result = result && (getUID() == other.getUID());
			}
			result = result && (hasSymbolID() == other.hasSymbolID());
			if (hasSymbolID()) {
				result = result && (getSymbolID() == other.getSymbolID());
			}
			result = result && (hasIconVisible() == other.hasIconVisible());
			if (hasIconVisible()) {
				result = result && (getIconVisible() == other.getIconVisible());
			}
			result = result && (hasIconSize() == other.hasIconSize());
			if (hasIconSize()) {
				result = result && (java.lang.Double.doubleToLongBits(getIconSize()) == java.lang.Double
						.doubleToLongBits(other.getIconSize()));
			}
			result = result && (hasIconRotate() == other.hasIconRotate());
			if (hasIconRotate()) {
				result = result && (java.lang.Double.doubleToLongBits(getIconRotate()) == java.lang.Double
						.doubleToLongBits(other.getIconRotate()));
			}
			result = result && (hasIconOffsetX() == other.hasIconOffsetX());
			if (hasIconOffsetX()) {
				result = result && (java.lang.Double.doubleToLongBits(getIconOffsetX()) == java.lang.Double
						.doubleToLongBits(other.getIconOffsetX()));
			}
			result = result && (hasIconOffsetY() == other.hasIconOffsetY());
			if (hasIconOffsetY()) {
				result = result && (java.lang.Double.doubleToLongBits(getIconOffsetY()) == java.lang.Double
						.doubleToLongBits(other.getIconOffsetY()));
			}
			result = result && (hasTextVisible() == other.hasTextVisible());
			if (hasTextVisible()) {
				result = result && (getTextVisible() == other.getTextVisible());
			}
			result = result && (hasTextSize() == other.hasTextSize());
			if (hasTextSize()) {
				result = result && (java.lang.Double.doubleToLongBits(getTextSize()) == java.lang.Double
						.doubleToLongBits(other.getTextSize()));
			}
			result = result && (hasTextRotate() == other.hasTextRotate());
			if (hasTextRotate()) {
				result = result && (java.lang.Double.doubleToLongBits(getTextRotate()) == java.lang.Double
						.doubleToLongBits(other.getTextRotate()));
			}
			result = result && (hasTextFont() == other.hasTextFont());
			if (hasTextFont()) {
				result = result && getTextFont().equals(other.getTextFont());
			}
			result = result && (hasTextColor() == other.hasTextColor());
			if (hasTextColor()) {
				result = result && getTextColor().equals(other.getTextColor());
			}
			result = result && (hasTextOffsetX() == other.hasTextOffsetX());
			if (hasTextOffsetX()) {
				result = result && (java.lang.Double.doubleToLongBits(getTextOffsetX()) == java.lang.Double
						.doubleToLongBits(other.getTextOffsetX()));
			}
			result = result && (hasTextOffsetY() == other.hasTextOffsetY());
			if (hasTextOffsetY()) {
				result = result && (java.lang.Double.doubleToLongBits(getTextOffsetY()) == java.lang.Double
						.doubleToLongBits(other.getTextOffsetY()));
			}
			result = result && (hasLevelMin() == other.hasLevelMin());
			if (hasLevelMin()) {
				result = result && (java.lang.Double.doubleToLongBits(getLevelMin()) == java.lang.Double
						.doubleToLongBits(other.getLevelMin()));
			}
			result = result && (hasLevelMax() == other.hasLevelMax());
			if (hasLevelMax()) {
				result = result && (java.lang.Double.doubleToLongBits(getLevelMax()) == java.lang.Double
						.doubleToLongBits(other.getLevelMax()));
			}
			result = result && (hasPriority() == other.hasPriority());
			if (hasPriority()) {
				result = result && (getPriority() == other.getPriority());
			}
			result = result && (hasOtherPaint() == other.hasOtherPaint());
			if (hasOtherPaint()) {
				result = result && getOtherPaint().equals(other.getOtherPaint());
			}
			result = result && (hasOtherLayout() == other.hasOtherLayout());
			if (hasOtherLayout()) {
				result = result && getOtherLayout().equals(other.getOtherLayout());
			}
			result = result && unknownFields.equals(other.unknownFields);
			return result;
		}

		@java.lang.Override
		public int hashCode() {
			if (memoizedHashCode != 0) {
				return memoizedHashCode;
			}
			int hash = 41;
			hash = (19 * hash) + getDescriptor().hashCode();
			if (hasUID()) {
				hash = (37 * hash) + UID_FIELD_NUMBER;
				hash = (53 * hash) + getUID();
			}
			if (hasSymbolID()) {
				hash = (37 * hash) + SYMBOLID_FIELD_NUMBER;
				hash = (53 * hash) + getSymbolID();
			}
			if (hasIconVisible()) {
				hash = (37 * hash) + ICONVISIBLE_FIELD_NUMBER;
				hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getIconVisible());
			}
			if (hasIconSize()) {
				hash = (37 * hash) + ICONSIZE_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getIconSize()));
			}
			if (hasIconRotate()) {
				hash = (37 * hash) + ICONROTATE_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getIconRotate()));
			}
			if (hasIconOffsetX()) {
				hash = (37 * hash) + ICONOFFSETX_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getIconOffsetX()));
			}
			if (hasIconOffsetY()) {
				hash = (37 * hash) + ICONOFFSETY_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getIconOffsetY()));
			}
			if (hasTextVisible()) {
				hash = (37 * hash) + TEXTVISIBLE_FIELD_NUMBER;
				hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getTextVisible());
			}
			if (hasTextSize()) {
				hash = (37 * hash) + TEXTSIZE_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getTextSize()));
			}
			if (hasTextRotate()) {
				hash = (37 * hash) + TEXTROTATE_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getTextRotate()));
			}
			if (hasTextFont()) {
				hash = (37 * hash) + TEXTFONT_FIELD_NUMBER;
				hash = (53 * hash) + getTextFont().hashCode();
			}
			if (hasTextColor()) {
				hash = (37 * hash) + TEXTCOLOR_FIELD_NUMBER;
				hash = (53 * hash) + getTextColor().hashCode();
			}
			if (hasTextOffsetX()) {
				hash = (37 * hash) + TEXTOFFSETX_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getTextOffsetX()));
			}
			if (hasTextOffsetY()) {
				hash = (37 * hash) + TEXTOFFSETY_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getTextOffsetY()));
			}
			if (hasLevelMin()) {
				hash = (37 * hash) + LEVELMIN_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getLevelMin()));
			}
			if (hasLevelMax()) {
				hash = (37 * hash) + LEVELMAX_FIELD_NUMBER;
				hash = (53 * hash)
						+ com.google.protobuf.Internal.hashLong(java.lang.Double.doubleToLongBits(getLevelMax()));
			}
			if (hasPriority()) {
				hash = (37 * hash) + PRIORITY_FIELD_NUMBER;
				hash = (53 * hash) + getPriority();
			}
			if (hasOtherPaint()) {
				hash = (37 * hash) + OTHERPAINT_FIELD_NUMBER;
				hash = (53 * hash) + getOtherPaint().hashCode();
			}
			if (hasOtherLayout()) {
				hash = (37 * hash) + OTHERLAYOUT_FIELD_NUMBER;
				hash = (53 * hash) + getOtherLayout().hashCode();
			}
			hash = (29 * hash) + unknownFields.hashCode();
			memoizedHashCode = hash;
			return hash;
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(byte[] data)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(byte[] data,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseDelimitedFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseDelimitedFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
					extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				com.google.protobuf.CodedInputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parseFrom(
				com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public Builder newBuilderForType() {
			return newBuilder();
		}

		public static Builder newBuilder() {
			return DEFAULT_INSTANCE.toBuilder();
		}

		public static Builder newBuilder(
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf prototype) {
			return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
		}

		public Builder toBuilder() {
			return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
		}

		@java.lang.Override
		protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}

		/**
		 * Protobuf type
		 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf}
		 */
		public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
				// @@protoc_insertion_point(builder_implements:cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf)
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbfOrBuilder {
			public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor;
			}

			protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_fieldAccessorTable
						.ensureFieldAccessorsInitialized(
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.class,
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.Builder.class);
			}

			// Construct using
			// cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}

			private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}

			private void maybeForceBuilderInitialization() {
				if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
				}
			}

			public Builder clear() {
				super.clear();
				uID_ = 0;
				bitField0_ = (bitField0_ & ~0x00000001);
				symbolID_ = 0;
				bitField0_ = (bitField0_ & ~0x00000002);
				iconVisible_ = false;
				bitField0_ = (bitField0_ & ~0x00000004);
				iconSize_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000008);
				iconRotate_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000010);
				iconOffsetX_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000020);
				iconOffsetY_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000040);
				textVisible_ = false;
				bitField0_ = (bitField0_ & ~0x00000080);
				textSize_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000100);
				textRotate_ = 0D;
				bitField0_ = (bitField0_ & ~0x00000200);
				textFont_ = "";
				bitField0_ = (bitField0_ & ~0x00000400);
				textColor_ = "";
				bitField0_ = (bitField0_ & ~0x00000800);
				textOffsetX_ = 0D;
				bitField0_ = (bitField0_ & ~0x00001000);
				textOffsetY_ = 0D;
				bitField0_ = (bitField0_ & ~0x00002000);
				levelMin_ = 0D;
				bitField0_ = (bitField0_ & ~0x00004000);
				levelMax_ = 0D;
				bitField0_ = (bitField0_ & ~0x00008000);
				priority_ = 0;
				bitField0_ = (bitField0_ & ~0x00010000);
				otherPaint_ = "";
				bitField0_ = (bitField0_ & ~0x00020000);
				otherLayout_ = "";
				bitField0_ = (bitField0_ & ~0x00040000);
				return this;
			}

			public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf getDefaultInstanceForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.getDefaultInstance();
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf build() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf result = buildPartial();
				if (!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf buildPartial() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf result = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf(
						this);
				int from_bitField0_ = bitField0_;
				int to_bitField0_ = 0;
				if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
					to_bitField0_ |= 0x00000001;
				}
				result.uID_ = uID_;
				if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
					to_bitField0_ |= 0x00000002;
				}
				result.symbolID_ = symbolID_;
				if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
					to_bitField0_ |= 0x00000004;
				}
				result.iconVisible_ = iconVisible_;
				if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
					to_bitField0_ |= 0x00000008;
				}
				result.iconSize_ = iconSize_;
				if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
					to_bitField0_ |= 0x00000010;
				}
				result.iconRotate_ = iconRotate_;
				if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
					to_bitField0_ |= 0x00000020;
				}
				result.iconOffsetX_ = iconOffsetX_;
				if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
					to_bitField0_ |= 0x00000040;
				}
				result.iconOffsetY_ = iconOffsetY_;
				if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
					to_bitField0_ |= 0x00000080;
				}
				result.textVisible_ = textVisible_;
				if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
					to_bitField0_ |= 0x00000100;
				}
				result.textSize_ = textSize_;
				if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
					to_bitField0_ |= 0x00000200;
				}
				result.textRotate_ = textRotate_;
				if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
					to_bitField0_ |= 0x00000400;
				}
				result.textFont_ = textFont_;
				if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
					to_bitField0_ |= 0x00000800;
				}
				result.textColor_ = textColor_;
				if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
					to_bitField0_ |= 0x00001000;
				}
				result.textOffsetX_ = textOffsetX_;
				if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
					to_bitField0_ |= 0x00002000;
				}
				result.textOffsetY_ = textOffsetY_;
				if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
					to_bitField0_ |= 0x00004000;
				}
				result.levelMin_ = levelMin_;
				if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
					to_bitField0_ |= 0x00008000;
				}
				result.levelMax_ = levelMax_;
				if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
					to_bitField0_ |= 0x00010000;
				}
				result.priority_ = priority_;
				if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
					to_bitField0_ |= 0x00020000;
				}
				result.otherPaint_ = otherPaint_;
				if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
					to_bitField0_ |= 0x00040000;
				}
				result.otherLayout_ = otherLayout_;
				result.bitField0_ = to_bitField0_;
				onBuilt();
				return result;
			}

			public Builder clone() {
				return (Builder) super.clone();
			}

			public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.setField(field, value);
			}

			public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
				return (Builder) super.clearField(field);
			}

			public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
				return (Builder) super.clearOneof(oneof);
			}

			public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, int index,
					Object value) {
				return (Builder) super.setRepeatedField(field, index, value);
			}

			public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.addRepeatedField(field, value);
			}

			public Builder mergeFrom(com.google.protobuf.Message other) {
				if (other instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf) {
					return mergeFrom((cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}

			public Builder mergeFrom(cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf other) {
				if (other == cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf.getDefaultInstance())
					return this;
				if (other.hasUID()) {
					setUID(other.getUID());
				}
				if (other.hasSymbolID()) {
					setSymbolID(other.getSymbolID());
				}
				if (other.hasIconVisible()) {
					setIconVisible(other.getIconVisible());
				}
				if (other.hasIconSize()) {
					setIconSize(other.getIconSize());
				}
				if (other.hasIconRotate()) {
					setIconRotate(other.getIconRotate());
				}
				if (other.hasIconOffsetX()) {
					setIconOffsetX(other.getIconOffsetX());
				}
				if (other.hasIconOffsetY()) {
					setIconOffsetY(other.getIconOffsetY());
				}
				if (other.hasTextVisible()) {
					setTextVisible(other.getTextVisible());
				}
				if (other.hasTextSize()) {
					setTextSize(other.getTextSize());
				}
				if (other.hasTextRotate()) {
					setTextRotate(other.getTextRotate());
				}
				if (other.hasTextFont()) {
					bitField0_ |= 0x00000400;
					textFont_ = other.textFont_;
					onChanged();
				}
				if (other.hasTextColor()) {
					bitField0_ |= 0x00000800;
					textColor_ = other.textColor_;
					onChanged();
				}
				if (other.hasTextOffsetX()) {
					setTextOffsetX(other.getTextOffsetX());
				}
				if (other.hasTextOffsetY()) {
					setTextOffsetY(other.getTextOffsetY());
				}
				if (other.hasLevelMin()) {
					setLevelMin(other.getLevelMin());
				}
				if (other.hasLevelMax()) {
					setLevelMax(other.getLevelMax());
				}
				if (other.hasPriority()) {
					setPriority(other.getPriority());
				}
				if (other.hasOtherPaint()) {
					bitField0_ |= 0x00020000;
					otherPaint_ = other.otherPaint_;
					onChanged();
				}
				if (other.hasOtherLayout()) {
					bitField0_ |= 0x00040000;
					otherLayout_ = other.otherLayout_;
					onChanged();
				}
				this.mergeUnknownFields(other.unknownFields);
				onChanged();
				return this;
			}

			public final boolean isInitialized() {
				if (!hasUID()) {
					return false;
				}
				if (!hasSymbolID()) {
					return false;
				}
				if (!hasIconVisible()) {
					return false;
				}
				if (!hasIconSize()) {
					return false;
				}
				if (!hasIconRotate()) {
					return false;
				}
				if (!hasIconOffsetX()) {
					return false;
				}
				if (!hasIconOffsetY()) {
					return false;
				}
				if (!hasTextVisible()) {
					return false;
				}
				if (!hasTextSize()) {
					return false;
				}
				if (!hasTextRotate()) {
					return false;
				}
				if (!hasTextFont()) {
					return false;
				}
				if (!hasTextColor()) {
					return false;
				}
				if (!hasTextOffsetX()) {
					return false;
				}
				if (!hasTextOffsetY()) {
					return false;
				}
				if (!hasLevelMin()) {
					return false;
				}
				if (!hasLevelMax()) {
					return false;
				}
				if (!hasPriority()) {
					return false;
				}
				return true;
			}

			public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
				} catch (com.google.protobuf.InvalidProtocolBufferException e) {
					parsedMessage = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf) e
							.getUnfinishedMessage();
					throw e.unwrapIOException();
				} finally {
					if (parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}

			private int bitField0_;

			private int uID_;

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public boolean hasUID() {
				return ((bitField0_ & 0x00000001) == 0x00000001);
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public int getUID() {
				return uID_;
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public Builder setUID(int value) {
				bitField0_ |= 0x00000001;
				uID_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint32 UID = 1;</code>
			 */
			public Builder clearUID() {
				bitField0_ = (bitField0_ & ~0x00000001);
				uID_ = 0;
				onChanged();
				return this;
			}

			private int symbolID_;

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public boolean hasSymbolID() {
				return ((bitField0_ & 0x00000002) == 0x00000002);
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public int getSymbolID() {
				return symbolID_;
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public Builder setSymbolID(int value) {
				bitField0_ |= 0x00000002;
				symbolID_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint32 symbolID = 2;</code>
			 */
			public Builder clearSymbolID() {
				bitField0_ = (bitField0_ & ~0x00000002);
				symbolID_ = 0;
				onChanged();
				return this;
			}

			private boolean iconVisible_;

			/**
			 * <code>required bool iconVisible = 3;</code>
			 */
			public boolean hasIconVisible() {
				return ((bitField0_ & 0x00000004) == 0x00000004);
			}

			/**
			 * <code>required bool iconVisible = 3;</code>
			 */
			public boolean getIconVisible() {
				return iconVisible_;
			}

			/**
			 * <code>required bool iconVisible = 3;</code>
			 */
			public Builder setIconVisible(boolean value) {
				bitField0_ |= 0x00000004;
				iconVisible_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required bool iconVisible = 3;</code>
			 */
			public Builder clearIconVisible() {
				bitField0_ = (bitField0_ & ~0x00000004);
				iconVisible_ = false;
				onChanged();
				return this;
			}

			private double iconSize_;

			/**
			 * <code>required double iconSize = 4;</code>
			 */
			public boolean hasIconSize() {
				return ((bitField0_ & 0x00000008) == 0x00000008);
			}

			/**
			 * <code>required double iconSize = 4;</code>
			 */
			public double getIconSize() {
				return iconSize_;
			}

			/**
			 * <code>required double iconSize = 4;</code>
			 */
			public Builder setIconSize(double value) {
				bitField0_ |= 0x00000008;
				iconSize_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double iconSize = 4;</code>
			 */
			public Builder clearIconSize() {
				bitField0_ = (bitField0_ & ~0x00000008);
				iconSize_ = 0D;
				onChanged();
				return this;
			}

			private double iconRotate_;

			/**
			 * <code>required double iconRotate = 5;</code>
			 */
			public boolean hasIconRotate() {
				return ((bitField0_ & 0x00000010) == 0x00000010);
			}

			/**
			 * <code>required double iconRotate = 5;</code>
			 */
			public double getIconRotate() {
				return iconRotate_;
			}

			/**
			 * <code>required double iconRotate = 5;</code>
			 */
			public Builder setIconRotate(double value) {
				bitField0_ |= 0x00000010;
				iconRotate_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double iconRotate = 5;</code>
			 */
			public Builder clearIconRotate() {
				bitField0_ = (bitField0_ & ~0x00000010);
				iconRotate_ = 0D;
				onChanged();
				return this;
			}

			private double iconOffsetX_;

			/**
			 * <code>required double iconOffsetX = 6;</code>
			 */
			public boolean hasIconOffsetX() {
				return ((bitField0_ & 0x00000020) == 0x00000020);
			}

			/**
			 * <code>required double iconOffsetX = 6;</code>
			 */
			public double getIconOffsetX() {
				return iconOffsetX_;
			}

			/**
			 * <code>required double iconOffsetX = 6;</code>
			 */
			public Builder setIconOffsetX(double value) {
				bitField0_ |= 0x00000020;
				iconOffsetX_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double iconOffsetX = 6;</code>
			 */
			public Builder clearIconOffsetX() {
				bitField0_ = (bitField0_ & ~0x00000020);
				iconOffsetX_ = 0D;
				onChanged();
				return this;
			}

			private double iconOffsetY_;

			/**
			 * <code>required double iconOffsetY = 7;</code>
			 */
			public boolean hasIconOffsetY() {
				return ((bitField0_ & 0x00000040) == 0x00000040);
			}

			/**
			 * <code>required double iconOffsetY = 7;</code>
			 */
			public double getIconOffsetY() {
				return iconOffsetY_;
			}

			/**
			 * <code>required double iconOffsetY = 7;</code>
			 */
			public Builder setIconOffsetY(double value) {
				bitField0_ |= 0x00000040;
				iconOffsetY_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double iconOffsetY = 7;</code>
			 */
			public Builder clearIconOffsetY() {
				bitField0_ = (bitField0_ & ~0x00000040);
				iconOffsetY_ = 0D;
				onChanged();
				return this;
			}

			private boolean textVisible_;

			/**
			 * <code>required bool textVisible = 10;</code>
			 */
			public boolean hasTextVisible() {
				return ((bitField0_ & 0x00000080) == 0x00000080);
			}

			/**
			 * <code>required bool textVisible = 10;</code>
			 */
			public boolean getTextVisible() {
				return textVisible_;
			}

			/**
			 * <code>required bool textVisible = 10;</code>
			 */
			public Builder setTextVisible(boolean value) {
				bitField0_ |= 0x00000080;
				textVisible_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required bool textVisible = 10;</code>
			 */
			public Builder clearTextVisible() {
				bitField0_ = (bitField0_ & ~0x00000080);
				textVisible_ = false;
				onChanged();
				return this;
			}

			private double textSize_;

			/**
			 * <code>required double textSize = 11;</code>
			 */
			public boolean hasTextSize() {
				return ((bitField0_ & 0x00000100) == 0x00000100);
			}

			/**
			 * <code>required double textSize = 11;</code>
			 */
			public double getTextSize() {
				return textSize_;
			}

			/**
			 * <code>required double textSize = 11;</code>
			 */
			public Builder setTextSize(double value) {
				bitField0_ |= 0x00000100;
				textSize_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double textSize = 11;</code>
			 */
			public Builder clearTextSize() {
				bitField0_ = (bitField0_ & ~0x00000100);
				textSize_ = 0D;
				onChanged();
				return this;
			}

			private double textRotate_;

			/**
			 * <code>required double textRotate = 12;</code>
			 */
			public boolean hasTextRotate() {
				return ((bitField0_ & 0x00000200) == 0x00000200);
			}

			/**
			 * <code>required double textRotate = 12;</code>
			 */
			public double getTextRotate() {
				return textRotate_;
			}

			/**
			 * <code>required double textRotate = 12;</code>
			 */
			public Builder setTextRotate(double value) {
				bitField0_ |= 0x00000200;
				textRotate_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double textRotate = 12;</code>
			 */
			public Builder clearTextRotate() {
				bitField0_ = (bitField0_ & ~0x00000200);
				textRotate_ = 0D;
				onChanged();
				return this;
			}

			private java.lang.Object textFont_ = "";

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public boolean hasTextFont() {
				return ((bitField0_ & 0x00000400) == 0x00000400);
			}

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public java.lang.String getTextFont() {
				java.lang.Object ref = textFont_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						textFont_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public com.google.protobuf.ByteString getTextFontBytes() {
				java.lang.Object ref = textFont_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					textFont_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public Builder setTextFont(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000400;
				textFont_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public Builder clearTextFont() {
				bitField0_ = (bitField0_ & ~0x00000400);
				textFont_ = getDefaultInstance().getTextFont();
				onChanged();
				return this;
			}

			/**
			 * <code>required string textFont = 13;</code>
			 */
			public Builder setTextFontBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000400;
				textFont_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object textColor_ = "";

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public boolean hasTextColor() {
				return ((bitField0_ & 0x00000800) == 0x00000800);
			}

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public java.lang.String getTextColor() {
				java.lang.Object ref = textColor_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						textColor_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public com.google.protobuf.ByteString getTextColorBytes() {
				java.lang.Object ref = textColor_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					textColor_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public Builder setTextColor(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000800;
				textColor_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public Builder clearTextColor() {
				bitField0_ = (bitField0_ & ~0x00000800);
				textColor_ = getDefaultInstance().getTextColor();
				onChanged();
				return this;
			}

			/**
			 * <code>required string textColor = 14;</code>
			 */
			public Builder setTextColorBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00000800;
				textColor_ = value;
				onChanged();
				return this;
			}

			private double textOffsetX_;

			/**
			 * <code>required double textOffsetX = 15;</code>
			 */
			public boolean hasTextOffsetX() {
				return ((bitField0_ & 0x00001000) == 0x00001000);
			}

			/**
			 * <code>required double textOffsetX = 15;</code>
			 */
			public double getTextOffsetX() {
				return textOffsetX_;
			}

			/**
			 * <code>required double textOffsetX = 15;</code>
			 */
			public Builder setTextOffsetX(double value) {
				bitField0_ |= 0x00001000;
				textOffsetX_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double textOffsetX = 15;</code>
			 */
			public Builder clearTextOffsetX() {
				bitField0_ = (bitField0_ & ~0x00001000);
				textOffsetX_ = 0D;
				onChanged();
				return this;
			}

			private double textOffsetY_;

			/**
			 * <code>required double textOffsetY = 16;</code>
			 */
			public boolean hasTextOffsetY() {
				return ((bitField0_ & 0x00002000) == 0x00002000);
			}

			/**
			 * <code>required double textOffsetY = 16;</code>
			 */
			public double getTextOffsetY() {
				return textOffsetY_;
			}

			/**
			 * <code>required double textOffsetY = 16;</code>
			 */
			public Builder setTextOffsetY(double value) {
				bitField0_ |= 0x00002000;
				textOffsetY_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double textOffsetY = 16;</code>
			 */
			public Builder clearTextOffsetY() {
				bitField0_ = (bitField0_ & ~0x00002000);
				textOffsetY_ = 0D;
				onChanged();
				return this;
			}

			private double levelMin_;

			/**
			 * <code>required double levelMin = 21;</code>
			 */
			public boolean hasLevelMin() {
				return ((bitField0_ & 0x00004000) == 0x00004000);
			}

			/**
			 * <code>required double levelMin = 21;</code>
			 */
			public double getLevelMin() {
				return levelMin_;
			}

			/**
			 * <code>required double levelMin = 21;</code>
			 */
			public Builder setLevelMin(double value) {
				bitField0_ |= 0x00004000;
				levelMin_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double levelMin = 21;</code>
			 */
			public Builder clearLevelMin() {
				bitField0_ = (bitField0_ & ~0x00004000);
				levelMin_ = 0D;
				onChanged();
				return this;
			}

			private double levelMax_;

			/**
			 * <code>required double levelMax = 22;</code>
			 */
			public boolean hasLevelMax() {
				return ((bitField0_ & 0x00008000) == 0x00008000);
			}

			/**
			 * <code>required double levelMax = 22;</code>
			 */
			public double getLevelMax() {
				return levelMax_;
			}

			/**
			 * <code>required double levelMax = 22;</code>
			 */
			public Builder setLevelMax(double value) {
				bitField0_ |= 0x00008000;
				levelMax_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required double levelMax = 22;</code>
			 */
			public Builder clearLevelMax() {
				bitField0_ = (bitField0_ & ~0x00008000);
				levelMax_ = 0D;
				onChanged();
				return this;
			}

			private int priority_;

			/**
			 * <code>required uint32 priority = 23;</code>
			 */
			public boolean hasPriority() {
				return ((bitField0_ & 0x00010000) == 0x00010000);
			}

			/**
			 * <code>required uint32 priority = 23;</code>
			 */
			public int getPriority() {
				return priority_;
			}

			/**
			 * <code>required uint32 priority = 23;</code>
			 */
			public Builder setPriority(int value) {
				bitField0_ |= 0x00010000;
				priority_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>required uint32 priority = 23;</code>
			 */
			public Builder clearPriority() {
				bitField0_ = (bitField0_ & ~0x00010000);
				priority_ = 0;
				onChanged();
				return this;
			}

			private java.lang.Object otherPaint_ = "";

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public boolean hasOtherPaint() {
				return ((bitField0_ & 0x00020000) == 0x00020000);
			}

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public java.lang.String getOtherPaint() {
				java.lang.Object ref = otherPaint_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						otherPaint_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public com.google.protobuf.ByteString getOtherPaintBytes() {
				java.lang.Object ref = otherPaint_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					otherPaint_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public Builder setOtherPaint(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00020000;
				otherPaint_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public Builder clearOtherPaint() {
				bitField0_ = (bitField0_ & ~0x00020000);
				otherPaint_ = getDefaultInstance().getOtherPaint();
				onChanged();
				return this;
			}

			/**
			 * <code>optional string otherPaint = 30;</code>
			 */
			public Builder setOtherPaintBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00020000;
				otherPaint_ = value;
				onChanged();
				return this;
			}

			private java.lang.Object otherLayout_ = "";

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public boolean hasOtherLayout() {
				return ((bitField0_ & 0x00040000) == 0x00040000);
			}

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public java.lang.String getOtherLayout() {
				java.lang.Object ref = otherLayout_;
				if (!(ref instanceof java.lang.String)) {
					com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
					java.lang.String s = bs.toStringUtf8();
					if (bs.isValidUtf8()) {
						otherLayout_ = s;
					}
					return s;
				} else {
					return (java.lang.String) ref;
				}
			}

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public com.google.protobuf.ByteString getOtherLayoutBytes() {
				java.lang.Object ref = otherLayout_;
				if (ref instanceof String) {
					com.google.protobuf.ByteString b = com.google.protobuf.ByteString
							.copyFromUtf8((java.lang.String) ref);
					otherLayout_ = b;
					return b;
				} else {
					return (com.google.protobuf.ByteString) ref;
				}
			}

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public Builder setOtherLayout(java.lang.String value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00040000;
				otherLayout_ = value;
				onChanged();
				return this;
			}

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public Builder clearOtherLayout() {
				bitField0_ = (bitField0_ & ~0x00040000);
				otherLayout_ = getDefaultInstance().getOtherLayout();
				onChanged();
				return this;
			}

			/**
			 * <code>optional string otherLayout = 31;</code>
			 */
			public Builder setOtherLayoutBytes(com.google.protobuf.ByteString value) {
				if (value == null) {
					throw new NullPointerException();
				}
				bitField0_ |= 0x00040000;
				otherLayout_ = value;
				onChanged();
				return this;
			}

			public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.setUnknownFields(unknownFields);
			}

			public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.mergeUnknownFields(unknownFields);
			}

			// @@protoc_insertion_point(builder_scope:cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf)
		}

		// @@protoc_insertion_point(class_scope:cn.platalk.map.vectortile.cbm.pbf.proto.IconTextSymbolPbf)
		private static final cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf DEFAULT_INSTANCE;
		static {
			DEFAULT_INSTANCE = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf();
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf getDefaultInstance() {
			return DEFAULT_INSTANCE;
		}

		@java.lang.Deprecated
		public static final com.google.protobuf.Parser<IconTextSymbolPbf> PARSER = new com.google.protobuf.AbstractParser<IconTextSymbolPbf>() {
			public IconTextSymbolPbf parsePartialFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry)
					throws com.google.protobuf.InvalidProtocolBufferException {
				return new IconTextSymbolPbf(input, extensionRegistry);
			}
		};

		public static com.google.protobuf.Parser<IconTextSymbolPbf> parser() {
			return PARSER;
		}

		@java.lang.Override
		public com.google.protobuf.Parser<IconTextSymbolPbf> getParserForType() {
			return PARSER;
		}

		public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.IconTextSymbolPbf getDefaultInstanceForType() {
			return DEFAULT_INSTANCE;
		}

	}

	public interface SymbolCollectionPbfOrBuilder extends
			// @@protoc_insertion_point(interface_extends:cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf)
			com.google.protobuf.MessageOrBuilder {

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		java.util.List<java.lang.Integer> getFloorList();

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		int getFloorCount();

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		int getFloor(int index);

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		java.util.List<java.lang.Integer> getRoomList();

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		int getRoomCount();

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		int getRoom(int index);

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		java.util.List<java.lang.Integer> getAssetList();

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		int getAssetCount();

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		int getAsset(int index);

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		java.util.List<java.lang.Integer> getFacilityList();

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		int getFacilityCount();

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		int getFacility(int index);

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		java.util.List<java.lang.Integer> getLabelList();

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		int getLabelCount();

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		int getLabel(int index);

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		java.util.List<java.lang.Integer> getExtrusionList();

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		int getExtrusionCount();

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		int getExtrusion(int index);
	}

	/**
	 * Protobuf type
	 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf}
	 */
	public static final class SymbolCollectionPbf extends com.google.protobuf.GeneratedMessageV3 implements
			// @@protoc_insertion_point(message_implements:cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf)
			SymbolCollectionPbfOrBuilder {
		// Use SymbolCollectionPbf.newBuilder() to construct.
		private SymbolCollectionPbf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
			super(builder);
		}

		private SymbolCollectionPbf() {
			floor_ = java.util.Collections.emptyList();
			room_ = java.util.Collections.emptyList();
			asset_ = java.util.Collections.emptyList();
			facility_ = java.util.Collections.emptyList();
			label_ = java.util.Collections.emptyList();
			extrusion_ = java.util.Collections.emptyList();
		}

		@java.lang.Override
		public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
			return this.unknownFields;
		}

		private SymbolCollectionPbf(com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			this();
			int mutable_bitField0_ = 0;
			com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet
					.newBuilder();
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
					case 0:
						done = true;
						break;
					default: {
						if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
							done = true;
						}
						break;
					}
					case 8: {
						if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
							floor_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000001;
						}
						floor_.add(input.readUInt32());
						break;
					}
					case 10: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
							floor_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000001;
						}
						while (input.getBytesUntilLimit() > 0) {
							floor_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					case 16: {
						if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
							room_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000002;
						}
						room_.add(input.readUInt32());
						break;
					}
					case 18: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
							room_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000002;
						}
						while (input.getBytesUntilLimit() > 0) {
							room_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					case 24: {
						if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
							asset_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000004;
						}
						asset_.add(input.readUInt32());
						break;
					}
					case 26: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
							asset_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000004;
						}
						while (input.getBytesUntilLimit() > 0) {
							asset_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					case 32: {
						if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
							facility_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000008;
						}
						facility_.add(input.readUInt32());
						break;
					}
					case 34: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
							facility_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000008;
						}
						while (input.getBytesUntilLimit() > 0) {
							facility_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					case 40: {
						if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
							label_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000010;
						}
						label_.add(input.readUInt32());
						break;
					}
					case 42: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
							label_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000010;
						}
						while (input.getBytesUntilLimit() > 0) {
							label_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					case 48: {
						if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
							extrusion_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000020;
						}
						extrusion_.add(input.readUInt32());
						break;
					}
					case 50: {
						int length = input.readRawVarint32();
						int limit = input.pushLimit(length);
						if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
							extrusion_ = new java.util.ArrayList<java.lang.Integer>();
							mutable_bitField0_ |= 0x00000020;
						}
						while (input.getBytesUntilLimit() > 0) {
							extrusion_.add(input.readUInt32());
						}
						input.popLimit(limit);
						break;
					}
					}
				}
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(this);
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
			} finally {
				if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
					floor_ = java.util.Collections.unmodifiableList(floor_);
				}
				if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
					room_ = java.util.Collections.unmodifiableList(room_);
				}
				if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
					asset_ = java.util.Collections.unmodifiableList(asset_);
				}
				if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
					facility_ = java.util.Collections.unmodifiableList(facility_);
				}
				if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
					label_ = java.util.Collections.unmodifiableList(label_);
				}
				if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
					extrusion_ = java.util.Collections.unmodifiableList(extrusion_);
				}
				this.unknownFields = unknownFields.build();
				makeExtensionsImmutable();
			}
		}

		public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor;
		}

		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
			return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.class,
							cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.Builder.class);
		}

		public static final int FLOOR_FIELD_NUMBER = 1;
		private java.util.List<java.lang.Integer> floor_;

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		public java.util.List<java.lang.Integer> getFloorList() {
			return floor_;
		}

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		public int getFloorCount() {
			return floor_.size();
		}

		/**
		 * <code>repeated uint32 floor = 1;</code>
		 */
		public int getFloor(int index) {
			return floor_.get(index);
		}

		public static final int ROOM_FIELD_NUMBER = 2;
		private java.util.List<java.lang.Integer> room_;

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		public java.util.List<java.lang.Integer> getRoomList() {
			return room_;
		}

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		public int getRoomCount() {
			return room_.size();
		}

		/**
		 * <code>repeated uint32 room = 2;</code>
		 */
		public int getRoom(int index) {
			return room_.get(index);
		}

		public static final int ASSET_FIELD_NUMBER = 3;
		private java.util.List<java.lang.Integer> asset_;

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		public java.util.List<java.lang.Integer> getAssetList() {
			return asset_;
		}

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		public int getAssetCount() {
			return asset_.size();
		}

		/**
		 * <code>repeated uint32 asset = 3;</code>
		 */
		public int getAsset(int index) {
			return asset_.get(index);
		}

		public static final int FACILITY_FIELD_NUMBER = 4;
		private java.util.List<java.lang.Integer> facility_;

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		public java.util.List<java.lang.Integer> getFacilityList() {
			return facility_;
		}

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		public int getFacilityCount() {
			return facility_.size();
		}

		/**
		 * <code>repeated uint32 facility = 4;</code>
		 */
		public int getFacility(int index) {
			return facility_.get(index);
		}

		public static final int LABEL_FIELD_NUMBER = 5;
		private java.util.List<java.lang.Integer> label_;

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		public java.util.List<java.lang.Integer> getLabelList() {
			return label_;
		}

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		public int getLabelCount() {
			return label_.size();
		}

		/**
		 * <code>repeated uint32 label = 5;</code>
		 */
		public int getLabel(int index) {
			return label_.get(index);
		}

		public static final int EXTRUSION_FIELD_NUMBER = 6;
		private java.util.List<java.lang.Integer> extrusion_;

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		public java.util.List<java.lang.Integer> getExtrusionList() {
			return extrusion_;
		}

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		public int getExtrusionCount() {
			return extrusion_.size();
		}

		/**
		 * <code>repeated uint32 extrusion = 6;</code>
		 */
		public int getExtrusion(int index) {
			return extrusion_.get(index);
		}

		private byte memoizedIsInitialized = -1;

		public final boolean isInitialized() {
			byte isInitialized = memoizedIsInitialized;
			if (isInitialized == 1)
				return true;
			if (isInitialized == 0)
				return false;

			memoizedIsInitialized = 1;
			return true;
		}

		public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
			for (int i = 0; i < floor_.size(); i++) {
				output.writeUInt32(1, floor_.get(i));
			}
			for (int i = 0; i < room_.size(); i++) {
				output.writeUInt32(2, room_.get(i));
			}
			for (int i = 0; i < asset_.size(); i++) {
				output.writeUInt32(3, asset_.get(i));
			}
			for (int i = 0; i < facility_.size(); i++) {
				output.writeUInt32(4, facility_.get(i));
			}
			for (int i = 0; i < label_.size(); i++) {
				output.writeUInt32(5, label_.get(i));
			}
			for (int i = 0; i < extrusion_.size(); i++) {
				output.writeUInt32(6, extrusion_.get(i));
			}
			unknownFields.writeTo(output);
		}

		public int getSerializedSize() {
			int size = memoizedSize;
			if (size != -1)
				return size;

			size = 0;
			{
				int dataSize = 0;
				for (int i = 0; i < floor_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(floor_.get(i));
				}
				size += dataSize;
				size += 1 * getFloorList().size();
			}
			{
				int dataSize = 0;
				for (int i = 0; i < room_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(room_.get(i));
				}
				size += dataSize;
				size += 1 * getRoomList().size();
			}
			{
				int dataSize = 0;
				for (int i = 0; i < asset_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(asset_.get(i));
				}
				size += dataSize;
				size += 1 * getAssetList().size();
			}
			{
				int dataSize = 0;
				for (int i = 0; i < facility_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(facility_.get(i));
				}
				size += dataSize;
				size += 1 * getFacilityList().size();
			}
			{
				int dataSize = 0;
				for (int i = 0; i < label_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(label_.get(i));
				}
				size += dataSize;
				size += 1 * getLabelList().size();
			}
			{
				int dataSize = 0;
				for (int i = 0; i < extrusion_.size(); i++) {
					dataSize += com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(extrusion_.get(i));
				}
				size += dataSize;
				size += 1 * getExtrusionList().size();
			}
			size += unknownFields.getSerializedSize();
			memoizedSize = size;
			return size;
		}

		private static final long serialVersionUID = 0L;

		@java.lang.Override
		public boolean equals(final java.lang.Object obj) {
			if (obj == this) {
				return true;
			}
			if (!(obj instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf)) {
				return super.equals(obj);
			}
			cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf other = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf) obj;

			boolean result = true;
			result = result && getFloorList().equals(other.getFloorList());
			result = result && getRoomList().equals(other.getRoomList());
			result = result && getAssetList().equals(other.getAssetList());
			result = result && getFacilityList().equals(other.getFacilityList());
			result = result && getLabelList().equals(other.getLabelList());
			result = result && getExtrusionList().equals(other.getExtrusionList());
			result = result && unknownFields.equals(other.unknownFields);
			return result;
		}

		@java.lang.Override
		public int hashCode() {
			if (memoizedHashCode != 0) {
				return memoizedHashCode;
			}
			int hash = 41;
			hash = (19 * hash) + getDescriptor().hashCode();
			if (getFloorCount() > 0) {
				hash = (37 * hash) + FLOOR_FIELD_NUMBER;
				hash = (53 * hash) + getFloorList().hashCode();
			}
			if (getRoomCount() > 0) {
				hash = (37 * hash) + ROOM_FIELD_NUMBER;
				hash = (53 * hash) + getRoomList().hashCode();
			}
			if (getAssetCount() > 0) {
				hash = (37 * hash) + ASSET_FIELD_NUMBER;
				hash = (53 * hash) + getAssetList().hashCode();
			}
			if (getFacilityCount() > 0) {
				hash = (37 * hash) + FACILITY_FIELD_NUMBER;
				hash = (53 * hash) + getFacilityList().hashCode();
			}
			if (getLabelCount() > 0) {
				hash = (37 * hash) + LABEL_FIELD_NUMBER;
				hash = (53 * hash) + getLabelList().hashCode();
			}
			if (getExtrusionCount() > 0) {
				hash = (37 * hash) + EXTRUSION_FIELD_NUMBER;
				hash = (53 * hash) + getExtrusionList().hashCode();
			}
			hash = (29 * hash) + unknownFields.hashCode();
			memoizedHashCode = hash;
			return hash;
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				com.google.protobuf.ByteString data) throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				com.google.protobuf.ByteString data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(byte[] data)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(byte[] data,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			return PARSER.parseFrom(data, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseDelimitedFrom(
				java.io.InputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseDelimitedFrom(
				java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input,
					extensionRegistry);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				com.google.protobuf.CodedInputStream input) throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parseFrom(
				com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
		}

		public Builder newBuilderForType() {
			return newBuilder();
		}

		public static Builder newBuilder() {
			return DEFAULT_INSTANCE.toBuilder();
		}

		public static Builder newBuilder(
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf prototype) {
			return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
		}

		public Builder toBuilder() {
			return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
		}

		@java.lang.Override
		protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			Builder builder = new Builder(parent);
			return builder;
		}

		/**
		 * Protobuf type
		 * {@code cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf}
		 */
		public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
				// @@protoc_insertion_point(builder_implements:cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf)
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbfOrBuilder {
			public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor;
			}

			protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_fieldAccessorTable
						.ensureFieldAccessorsInitialized(
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.class,
								cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.Builder.class);
			}

			// Construct using
			// cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.newBuilder()
			private Builder() {
				maybeForceBuilderInitialization();
			}

			private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
				super(parent);
				maybeForceBuilderInitialization();
			}

			private void maybeForceBuilderInitialization() {
				if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {
				}
			}

			public Builder clear() {
				super.clear();
				floor_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000001);
				room_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000002);
				asset_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000004);
				facility_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000008);
				label_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000010);
				extrusion_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000020);
				return this;
			}

			public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf getDefaultInstanceForType() {
				return cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf.getDefaultInstance();
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf build() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf result = buildPartial();
				if (!result.isInitialized()) {
					throw newUninitializedMessageException(result);
				}
				return result;
			}

			public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf buildPartial() {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf result = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf(
						this);
				int from_bitField0_ = bitField0_;
				if (((bitField0_ & 0x00000001) == 0x00000001)) {
					floor_ = java.util.Collections.unmodifiableList(floor_);
					bitField0_ = (bitField0_ & ~0x00000001);
				}
				result.floor_ = floor_;
				if (((bitField0_ & 0x00000002) == 0x00000002)) {
					room_ = java.util.Collections.unmodifiableList(room_);
					bitField0_ = (bitField0_ & ~0x00000002);
				}
				result.room_ = room_;
				if (((bitField0_ & 0x00000004) == 0x00000004)) {
					asset_ = java.util.Collections.unmodifiableList(asset_);
					bitField0_ = (bitField0_ & ~0x00000004);
				}
				result.asset_ = asset_;
				if (((bitField0_ & 0x00000008) == 0x00000008)) {
					facility_ = java.util.Collections.unmodifiableList(facility_);
					bitField0_ = (bitField0_ & ~0x00000008);
				}
				result.facility_ = facility_;
				if (((bitField0_ & 0x00000010) == 0x00000010)) {
					label_ = java.util.Collections.unmodifiableList(label_);
					bitField0_ = (bitField0_ & ~0x00000010);
				}
				result.label_ = label_;
				if (((bitField0_ & 0x00000020) == 0x00000020)) {
					extrusion_ = java.util.Collections.unmodifiableList(extrusion_);
					bitField0_ = (bitField0_ & ~0x00000020);
				}
				result.extrusion_ = extrusion_;
				onBuilt();
				return result;
			}

			public Builder clone() {
				return (Builder) super.clone();
			}

			public Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.setField(field, value);
			}

			public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
				return (Builder) super.clearField(field);
			}

			public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
				return (Builder) super.clearOneof(oneof);
			}

			public Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, int index,
					Object value) {
				return (Builder) super.setRepeatedField(field, index, value);
			}

			public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value) {
				return (Builder) super.addRepeatedField(field, value);
			}

			public Builder mergeFrom(com.google.protobuf.Message other) {
				if (other instanceof cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf) {
					return mergeFrom((cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf) other);
				} else {
					super.mergeFrom(other);
					return this;
				}
			}

			public Builder mergeFrom(cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf other) {
				if (other == cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf
						.getDefaultInstance())
					return this;
				if (!other.floor_.isEmpty()) {
					if (floor_.isEmpty()) {
						floor_ = other.floor_;
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						ensureFloorIsMutable();
						floor_.addAll(other.floor_);
					}
					onChanged();
				}
				if (!other.room_.isEmpty()) {
					if (room_.isEmpty()) {
						room_ = other.room_;
						bitField0_ = (bitField0_ & ~0x00000002);
					} else {
						ensureRoomIsMutable();
						room_.addAll(other.room_);
					}
					onChanged();
				}
				if (!other.asset_.isEmpty()) {
					if (asset_.isEmpty()) {
						asset_ = other.asset_;
						bitField0_ = (bitField0_ & ~0x00000004);
					} else {
						ensureAssetIsMutable();
						asset_.addAll(other.asset_);
					}
					onChanged();
				}
				if (!other.facility_.isEmpty()) {
					if (facility_.isEmpty()) {
						facility_ = other.facility_;
						bitField0_ = (bitField0_ & ~0x00000008);
					} else {
						ensureFacilityIsMutable();
						facility_.addAll(other.facility_);
					}
					onChanged();
				}
				if (!other.label_.isEmpty()) {
					if (label_.isEmpty()) {
						label_ = other.label_;
						bitField0_ = (bitField0_ & ~0x00000010);
					} else {
						ensureLabelIsMutable();
						label_.addAll(other.label_);
					}
					onChanged();
				}
				if (!other.extrusion_.isEmpty()) {
					if (extrusion_.isEmpty()) {
						extrusion_ = other.extrusion_;
						bitField0_ = (bitField0_ & ~0x00000020);
					} else {
						ensureExtrusionIsMutable();
						extrusion_.addAll(other.extrusion_);
					}
					onChanged();
				}
				this.mergeUnknownFields(other.unknownFields);
				onChanged();
				return this;
			}

			public final boolean isInitialized() {
				return true;
			}

			public Builder mergeFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf parsedMessage = null;
				try {
					parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
				} catch (com.google.protobuf.InvalidProtocolBufferException e) {
					parsedMessage = (cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf) e
							.getUnfinishedMessage();
					throw e.unwrapIOException();
				} finally {
					if (parsedMessage != null) {
						mergeFrom(parsedMessage);
					}
				}
				return this;
			}

			private int bitField0_;

			private java.util.List<java.lang.Integer> floor_ = java.util.Collections.emptyList();

			private void ensureFloorIsMutable() {
				if (!((bitField0_ & 0x00000001) == 0x00000001)) {
					floor_ = new java.util.ArrayList<java.lang.Integer>(floor_);
					bitField0_ |= 0x00000001;
				}
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public java.util.List<java.lang.Integer> getFloorList() {
				return java.util.Collections.unmodifiableList(floor_);
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public int getFloorCount() {
				return floor_.size();
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public int getFloor(int index) {
				return floor_.get(index);
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public Builder setFloor(int index, int value) {
				ensureFloorIsMutable();
				floor_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public Builder addFloor(int value) {
				ensureFloorIsMutable();
				floor_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public Builder addAllFloor(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureFloorIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, floor_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 floor = 1;</code>
			 */
			public Builder clearFloor() {
				floor_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000001);
				onChanged();
				return this;
			}

			private java.util.List<java.lang.Integer> room_ = java.util.Collections.emptyList();

			private void ensureRoomIsMutable() {
				if (!((bitField0_ & 0x00000002) == 0x00000002)) {
					room_ = new java.util.ArrayList<java.lang.Integer>(room_);
					bitField0_ |= 0x00000002;
				}
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public java.util.List<java.lang.Integer> getRoomList() {
				return java.util.Collections.unmodifiableList(room_);
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public int getRoomCount() {
				return room_.size();
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public int getRoom(int index) {
				return room_.get(index);
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public Builder setRoom(int index, int value) {
				ensureRoomIsMutable();
				room_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public Builder addRoom(int value) {
				ensureRoomIsMutable();
				room_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public Builder addAllRoom(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureRoomIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, room_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 room = 2;</code>
			 */
			public Builder clearRoom() {
				room_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000002);
				onChanged();
				return this;
			}

			private java.util.List<java.lang.Integer> asset_ = java.util.Collections.emptyList();

			private void ensureAssetIsMutable() {
				if (!((bitField0_ & 0x00000004) == 0x00000004)) {
					asset_ = new java.util.ArrayList<java.lang.Integer>(asset_);
					bitField0_ |= 0x00000004;
				}
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public java.util.List<java.lang.Integer> getAssetList() {
				return java.util.Collections.unmodifiableList(asset_);
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public int getAssetCount() {
				return asset_.size();
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public int getAsset(int index) {
				return asset_.get(index);
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public Builder setAsset(int index, int value) {
				ensureAssetIsMutable();
				asset_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public Builder addAsset(int value) {
				ensureAssetIsMutable();
				asset_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public Builder addAllAsset(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureAssetIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, asset_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 asset = 3;</code>
			 */
			public Builder clearAsset() {
				asset_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000004);
				onChanged();
				return this;
			}

			private java.util.List<java.lang.Integer> facility_ = java.util.Collections.emptyList();

			private void ensureFacilityIsMutable() {
				if (!((bitField0_ & 0x00000008) == 0x00000008)) {
					facility_ = new java.util.ArrayList<java.lang.Integer>(facility_);
					bitField0_ |= 0x00000008;
				}
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public java.util.List<java.lang.Integer> getFacilityList() {
				return java.util.Collections.unmodifiableList(facility_);
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public int getFacilityCount() {
				return facility_.size();
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public int getFacility(int index) {
				return facility_.get(index);
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public Builder setFacility(int index, int value) {
				ensureFacilityIsMutable();
				facility_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public Builder addFacility(int value) {
				ensureFacilityIsMutable();
				facility_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public Builder addAllFacility(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureFacilityIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, facility_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 facility = 4;</code>
			 */
			public Builder clearFacility() {
				facility_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000008);
				onChanged();
				return this;
			}

			private java.util.List<java.lang.Integer> label_ = java.util.Collections.emptyList();

			private void ensureLabelIsMutable() {
				if (!((bitField0_ & 0x00000010) == 0x00000010)) {
					label_ = new java.util.ArrayList<java.lang.Integer>(label_);
					bitField0_ |= 0x00000010;
				}
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public java.util.List<java.lang.Integer> getLabelList() {
				return java.util.Collections.unmodifiableList(label_);
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public int getLabelCount() {
				return label_.size();
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public int getLabel(int index) {
				return label_.get(index);
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public Builder setLabel(int index, int value) {
				ensureLabelIsMutable();
				label_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public Builder addLabel(int value) {
				ensureLabelIsMutable();
				label_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public Builder addAllLabel(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureLabelIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, label_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 label = 5;</code>
			 */
			public Builder clearLabel() {
				label_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000010);
				onChanged();
				return this;
			}

			private java.util.List<java.lang.Integer> extrusion_ = java.util.Collections.emptyList();

			private void ensureExtrusionIsMutable() {
				if (!((bitField0_ & 0x00000020) == 0x00000020)) {
					extrusion_ = new java.util.ArrayList<java.lang.Integer>(extrusion_);
					bitField0_ |= 0x00000020;
				}
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public java.util.List<java.lang.Integer> getExtrusionList() {
				return java.util.Collections.unmodifiableList(extrusion_);
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public int getExtrusionCount() {
				return extrusion_.size();
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public int getExtrusion(int index) {
				return extrusion_.get(index);
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public Builder setExtrusion(int index, int value) {
				ensureExtrusionIsMutable();
				extrusion_.set(index, value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public Builder addExtrusion(int value) {
				ensureExtrusionIsMutable();
				extrusion_.add(value);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public Builder addAllExtrusion(java.lang.Iterable<? extends java.lang.Integer> values) {
				ensureExtrusionIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(values, extrusion_);
				onChanged();
				return this;
			}

			/**
			 * <code>repeated uint32 extrusion = 6;</code>
			 */
			public Builder clearExtrusion() {
				extrusion_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000020);
				onChanged();
				return this;
			}

			public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.setUnknownFields(unknownFields);
			}

			public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
				return super.mergeUnknownFields(unknownFields);
			}

			// @@protoc_insertion_point(builder_scope:cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf)
		}

		// @@protoc_insertion_point(class_scope:cn.platalk.map.vectortile.cbm.pbf.proto.SymbolCollectionPbf)
		private static final cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf DEFAULT_INSTANCE;
		static {
			DEFAULT_INSTANCE = new cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf();
		}

		public static cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf getDefaultInstance() {
			return DEFAULT_INSTANCE;
		}

		@java.lang.Deprecated
		public static final com.google.protobuf.Parser<SymbolCollectionPbf> PARSER = new com.google.protobuf.AbstractParser<SymbolCollectionPbf>() {
			public SymbolCollectionPbf parsePartialFrom(com.google.protobuf.CodedInputStream input,
					com.google.protobuf.ExtensionRegistryLite extensionRegistry)
					throws com.google.protobuf.InvalidProtocolBufferException {
				return new SymbolCollectionPbf(input, extensionRegistry);
			}
		};

		public static com.google.protobuf.Parser<SymbolCollectionPbf> parser() {
			return PARSER;
		}

		@java.lang.Override
		public com.google.protobuf.Parser<SymbolCollectionPbf> getParserForType() {
			return PARSER;
		}

		public cn.platalk.map.vectortile.cbm.pbf.proto.TYSymbolPbf.SymbolCollectionPbf getDefaultInstanceForType() {
			return DEFAULT_INSTANCE;
		}

	}

	private static final com.google.protobuf.Descriptors.Descriptor internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor;
	private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_fieldAccessorTable;
	private static final com.google.protobuf.Descriptors.Descriptor internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor;
	private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_fieldAccessorTable;
	private static final com.google.protobuf.Descriptors.Descriptor internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor;
	private static final com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_fieldAccessorTable;

	public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
		return descriptor;
	}

	private static com.google.protobuf.Descriptors.FileDescriptor descriptor;
	static {
		java.lang.String[] descriptorData = {
				"\n\024t_y_symbol_pbf.proto\022\'cn.platalk.map.v" + "ectortile.cbm.pbf.proto\"\221\001\n\rFillSymbolPb"
						+ "f\022\013\n\003UID\030\001 \002(\r\022\020\n\010symbolID\030\002 \002(\r\022\021\n\tfill"
						+ "Color\030\003 \002(\t\022\024\n\014outlineColor\030\004 \002(\t\022\024\n\014out"
						+ "lineWidth\030\005 \002(\001\022\020\n\010levelMin\030\006 \002(\001\022\020\n\010lev"
						+ "elMax\030\007 \002(\001\"\200\003\n\021IconTextSymbolPbf\022\013\n\003UID"
						+ "\030\001 \002(\r\022\020\n\010symbolID\030\002 \002(\r\022\023\n\013iconVisible\030"
						+ "\003 \002(\010\022\020\n\010iconSize\030\004 \002(\001\022\022\n\niconRotate\030\005 "
						+ "\002(\001\022\023\n\013iconOffsetX\030\006 \002(\001\022\023\n\013iconOffsetY\030"
						+ "\007 \002(\001\022\023\n\013textVisible\030\n \002(\010\022\020\n\010textSize\030\013",
				" \002(\001\022\022\n\ntextRotate\030\014 \002(\001\022\020\n\010textFont\030\r \002"
						+ "(\t\022\021\n\ttextColor\030\016 \002(\t\022\023\n\013textOffsetX\030\017 \002"
						+ "(\001\022\023\n\013textOffsetY\030\020 \002(\001\022\020\n\010levelMin\030\025 \002("
						+ "\001\022\020\n\010levelMax\030\026 \002(\001\022\020\n\010priority\030\027 \002(\r\022\022\n"
						+ "\notherPaint\030\036 \001(\t\022\023\n\013otherLayout\030\037 \001(\t\"u"
						+ "\n\023SymbolCollectionPbf\022\r\n\005floor\030\001 \003(\r\022\014\n\004"
						+ "room\030\002 \003(\r\022\r\n\005asset\030\003 \003(\r\022\020\n\010facility\030\004 "
						+ "\003(\r\022\r\n\005label\030\005 \003(\r\022\021\n\textrusion\030\006 \003(\r" };
		com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
			public com.google.protobuf.ExtensionRegistry assignDescriptors(
					com.google.protobuf.Descriptors.FileDescriptor root) {
				descriptor = root;
				return null;
			}
		};
		com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData,
				new com.google.protobuf.Descriptors.FileDescriptor[] {}, assigner);
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor = getDescriptor()
				.getMessageTypes().get(0);
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
				internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_FillSymbolPbf_descriptor,
				new java.lang.String[] { "UID", "SymbolID", "FillColor", "OutlineColor", "OutlineWidth", "LevelMin",
						"LevelMax", });
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor = getDescriptor()
				.getMessageTypes().get(1);
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
				internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_IconTextSymbolPbf_descriptor,
				new java.lang.String[] { "UID", "SymbolID", "IconVisible", "IconSize", "IconRotate", "IconOffsetX",
						"IconOffsetY", "TextVisible", "TextSize", "TextRotate", "TextFont", "TextColor", "TextOffsetX",
						"TextOffsetY", "LevelMin", "LevelMax", "Priority", "OtherPaint", "OtherLayout", });
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor = getDescriptor()
				.getMessageTypes().get(2);
		internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_fieldAccessorTable = new com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
				internal_static_cn_platalk_map_vectortile_cbm_pbf_proto_SymbolCollectionPbf_descriptor,
				new java.lang.String[] { "Floor", "Room", "Asset", "Facility", "Label", "Extrusion", });
	}

	// @@protoc_insertion_point(outer_class_scope)
}
